================二分法:==============
public static int binarySearch(Integer[] srcArray, int des) {
    //定义初始最小、最大索引
    int low = 0;
    int high = srcArray.length - 1;
    //确保不会出现重复查找，越界
    while (low <= high) {
        //计算出中间索引值
        int middle = (high + low)>>>1 ;//防止溢出
        if (des == srcArray[middle]) {
            return middle;
        //判断下限
        } else if (des < srcArray[middle]) {
            high = middle - 1;
        //判断上限
        } else {
            low = middle + 1;
        }
    }
    //若没有，则返回-1
    return -1;
}

=============判断字符串是否对称:==============

    //方法一
    public static boolean isSymmetric(String line){

        char[] chars=line.toCharArray();
        boolean flag=true;
        for (int start=0,end=chars.length-1;start<end;start++,end--){
            if (chars[start]!=chars[end]){
                flag=false;
                break;
            }
        }
        return flag;
    }
    //方法二
    public static boolean isSymmetric1(String line){

        return new StringBuffer(line).reverse().toString().equals(line);
    } 

=============从排序数组中删除重复项=============
public class leetcode26 {
    public static void main(String[] args) {
        leetcode26 lt = new leetcode26();
        int []num = {0,1,1,2,2,3,3,4};
        System.out.println(lt.removeDuplicates(num));
    }
    // 扔进去AC了他
    public int removeDuplicates(int[] nums) {
        if (nums.length == 0)
            return 0;
        //判断无输入
        int number = 0;//标记计数
        for (int i=0; i < nums.length ; i++) {
            if ( nums[i] != nums[number] ) {
                number++;
                nums[number] = nums[i];
            }
        }
        number+=1; //标记+1即为数字个数
        return number;
    }
 
